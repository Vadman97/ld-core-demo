name: Update Demo Environment to v1.2.1

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'User alias or LD env key'
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  ECR_REPOSITORY: ld-core-demo
  KUBECTL_VERSION: "v1.23.0"
  LD_API_KEY: ${{ secrets.LD_API_KEY }} 
  DEMO_NAMESPACE: ${{ github.event.inputs.name }}


jobs:
  update-demo-env-1-2-1:
    needs: handle-rate-limit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install LaunchDarkly CLI
        run: npm install -g @launchdarkly/ldcli

      - name: LD CLI Configure
        run: ldcli config --set access-token ${{ secrets.LD_API_KEY }}
      
      - name: Update Cart Suggested Items Feature Flag Config
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag cartSuggestedItems --semantic-patch  -d "$(cat ./.github/workflows/v.1.2.1/cartSuggestedItems.json)"

      - name: Delete Stocks API 
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags delete --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag stocksAPI

      - name: Update new investment stock api
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag release-new-investment-stock-api  -d "$(cat ./.github/workflows/v.1.2.1/release-new-investment-stock-api.json)"

      - name: Update release new recent trades db
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag investment-recent-trade-db -d '{"patch":[{"op":"replace","path":"/name","value":"06 - Release New Recent Trades DB"}]}'

      - name: Update launch club loyalty program flag
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag launchClubLoyalty -d '{"patch":[{"op":"replace","path":"/name","value":"07 - Enable Launch Club Loyalty Program"}]}'

      - name: Update launch priority boarding flag
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag priorityBoarding -d '{"patch":[{"op":"replace","path":"/name","value":"08 - Launch Club - Priority Boarding"}]}'

      - name: Update targeted plane meal promotion
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag mealPromoExperience -d '{"patch":[{"op":"replace","path":"/name","value":"09 - Targeted Plane Meal Promotion"}]}'

      - name: Update release ai travel insights
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag aiTravelInsights -d '{"patch":[{"op":"replace","path":"/name","value":"10 - Release AI Travel Insights"}]}'

      - name: Update Feature Store Headers
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: echo "Feature Store Headers Updated"

      - name: Update Store Highlight Text
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag storeAttentionCallout -d '{"patch":[{"op":"replace","path":"/name","value":"12 - Store Highlight Text"}]}'

      - name: Cart Suggested Items
        run: ${{ needs.handle-rate-limit.outputs.response }}
        env:
          COMMAND: ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag cartSuggestedItems -d '{"patch":[{"op":"replace","path":"/name","value":"13 - Cart Suggested items"}]}'

jobs:
  handle-rate-limit:
    runs-on: ubuntu-latest
    outputs:
      response: ${{ steps.rate-limit-handler.outputs.response }}
    steps:
      - name: Rate Limit Handler
        id: rate-limit-handler
        env:
          COMMAND: ${{ github.event.inputs.command }}
        run: |
          response=$(eval $COMMAND 2>&1)
          if [[ $response == *"You've exceeded the API rate limit. Try again later. (code: rate_limited)"* ]]; then
            echo "Rate limit exceeded, retrying in 5 seconds..."
            sleep 5
            response=$(eval $COMMAND)
          fi
          echo "::set-output name=response::$response"