name: Update Demo Environment to v1.2.1

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'User alias or LD env key'
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  ECR_REPOSITORY: ld-core-demo
  KUBECTL_VERSION: "v1.23.0"
  LD_API_KEY: ${{ secrets.LD_API_KEY }} 
  DEMO_NAMESPACE: ${{ github.event.inputs.name }}

jobs:
  update-demo-env-1-2-1:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./.github/workflows/requirements.txt

      - name: Install LaunchDarkly CLI
        run: npm install -g @launchdarkly/ldcli

      - name: LD CLI Configure
        run: ldcli config --set access-token ${{ secrets.LD_API_KEY }}
      
      - name: Update Cart Suggested Items Feature Flag Config
        run: |
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag cartSuggestedItems --semantic-patch -d "$(cat ./.github/workflows/v.1.2.1/cartSuggestedItems.json)" 2>&1)
          done
          echo "$response"
          
      - name: Delete Stocks API 
        run: |
          echo "Deleting Stocks API Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags delete --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag stocksAPI 2>&1)
          done
          echo "$response"

      - name: Update new investment stock api
        run: |
          echo "Updating New Investment Stock API Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag release-new-investment-stock-api  -d "$(cat ./.github/workflows/v.1.2.1/release-new-investment-stock-api.json)" 2>&1)
          done
          echo "$response"

      - name: Update release new recent trades db
        run: |
          echo "Updating Release New Recent Trades DB Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag investment-recent-trade-db -d '{"patch":[{"op":"replace","path":"/name","value":"06 - Release New Recent Trades DB"}]}' 2>&1)
          done
          echo "$response"

      - name: Update launch club loyalty program flag
        run: |
          echo "Updating Launch Club Loyalty Program Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag launchClubLoyalty -d '{"patch":[{"op":"replace","path":"/name","value":"07 - Enable Launch Club Loyalty Program"}]}' 2>&1)
          done
          echo "$response"

      - name: Update launch priority boarding flag
        run: |
          echo "Updating Launch Priority Boarding Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag priorityBoarding -d '{"patch":[{"op":"replace","path":"/name","value":"08 - Launch Club - Priority Boarding"}]}' 2>&1)
          done
          echo "$response"

      - name: Update targeted plane meal promotion
        run: |
          echo "Updating Targeted Plane Meal Promotion Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag mealPromoExperience -d '{"patch":[{"op":"replace","path":"/name","value":"09 - Targeted Plane Meal Promotion"}]}' 2>&1)
          done
          echo "$response"

      - name: Update release ai travel insights
        run: |
          echo "Updating AI Travel Insights Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag aiTravelInsights -d '{"patch":[{"op":"replace","path":"/name","value":"10 - Release AI Travel Insights"}]}' 2>&1)
          done
          echo "$response"

      - name: Update Feature Store Headers
        run: |
          echo "Updating Feature Store Headers Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag featureStoreHeaders -d '{"patch":[{"op":"replace","path":"/name","value":"11 - Featured Store Headers"}]}' 2>&1)
          done
          echo "$response"

      - name: Update Store Highlight Text
        run: |
          echo "Updating Store Highlight Text Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag storeAttentionCallout -d '{"patch":[{"op":"replace","path":"/name","value":"12 - Store Highlight Text"}]}' 2>&1)
          done
          echo "$response"

      - name: Cart Suggested Items
        run: |
          echo "Updating Cart Suggested Items Feature Flag"
          response=""
          until [[ $response != *"API Limit Exceeded"* ]]; do
            if [[ $response == *"API Limit Exceeded"* ]]; then
              echo "API Limit Exceeded, waiting 5 seconds..."
              sleep 5
            fi
            response=$(ldcli flags update --project ${{ env.DEMO_NAMESPACE }}-ld-demo --flag cartSuggestedItems -d '{"patch":[{"op":"replace","path":"/name","value":"13 - Cart Suggested items"}]}' 2>&1)
          done
          echo "$response"
